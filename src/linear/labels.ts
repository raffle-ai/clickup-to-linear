import { IssueLabelConnection } from "@linear/sdk";
import { z } from "zod";
import path from "path";

import { linearClient } from "./linear-client";

/** To be run from the setup CLI to generate `/setup/labels.json` data */
export async function viewLabels() {
  const labels = await linearClient.issueLabels({ first: 250 });

  const output = labels.nodes.map((label) => ({
    name: label.name,
    id: label.id,
    team: label.team,
  }));

  process.stdout.write(JSON.stringify(output, null, 2));
}

/**
 * Create all Team label from a JSON file generated by calling ClickUp API
 * E.g.: call task API, copy the response under under the "custom fields" key
 * */
export async function createTeamLabels(filename: string) {
  const teamId = process.env.TEAM_ID;
  if (!teamId) throw new Error("Missing TEAM_ID");

  const filepath = path.join(process.cwd(), filename);
  const file = Bun.file(filepath);
  const contents = await file.json();

  const allLabels = schema.parse(contents);

  const existingLabels = await linearClient.issueLabels({ first: 250 });

  console.log("Check existing labels...");

  const missingLabels = allLabels.filter(
    (label) => !findLabelByName(label.label, existingLabels)
  );
  if (!missingLabels.length) throw new Error("No labels to create!");

  console.log(
    "Creating missing labels...",
    missingLabels.map((label) => label.label).join(", ")
  );

  for (const label of missingLabels) {
    console.log("Creating label", label.label);

    await linearClient.createIssueLabel({
      name: label.label,
      color: label.color,
      teamId,
    });
  }
  console.log("Labels created!");
}

const findLabelByName = (name: string, labels: IssueLabelConnection) => {
  return labels.nodes.find((label) => label.name === name);
};

const schema = z.array(
  z.object({ id: z.string(), label: z.string(), color: z.string() })
);
